# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/131iwrl4duztsVCIX3sUx7FqGrbkCPjRO
"""

# Homework 2
from abc import ABC, abstractmethod
class Person(ABC):
  def __init__(seft, name, yob):
    seft._name = name
    seft._yob = yob
  def get_yob(seft):
    return seft._yob

  @abstractmethod
  def describe(seft):
    pass

class Student(Person):
    def __init__(seft, name, yob, grade):
      super().__init__(name=name, yob=yob)
      seft._grade = grade

    def describe(seft):
      print(f"Student - Name : {seft._name} - YoB: {seft._yob} - Grade: {seft._grade}")

class Doctor(Person):
    def __init__(seft, name, yob, specialist):
      super().__init__(name=name, yob=yob)
      seft._specialist = specialist

    def describe(seft):
      print(f"Doctor - Name : {seft._name} - YoB: {seft._yob} - Specialist: {seft._specialist}")


class Teacher(Person):
  def __init__(seft, name, yob, subject):
    super().__init__(name=name, yob=yob)
    seft._subject = subject

  def describe(seft):
    print(f"Teacher - Name : {seft._name} - YoB: {seft._yob} - Subject: {seft._subject}")

Student1 = Student("Thuan", 2011, "10")
Student1.describe()

doctor1 = Doctor("Thien", 1998, "Hi")
doctor1.describe()

doctor2 = Doctor("Thu",1987, "Hello")
doctor2.describe()

teacher1 = Teacher("Thien", 1998, "Math")
teacher1.describe()

from collections import Counter
class Ward:
  def __init__(seft,name):
    seft.__name = name
    seft.__list_people = list()

  def add_person(seft, person: Person):
    seft.__list_people.append(person)


  def describe(seft):
    print(f"Name: {seft.__name}")
    for p in seft.__list_people:
        p.describe()

  def count_doctor(seft):
    counter = 0
    for p in seft.__list_people:
      if isinstance(p, Doctor):
        counter +=1
    return counter

  def sort_yob(seft):
    return seft.__list_people.sort(key=lambda x: x.get_yob(), reverse= True)

  def compute_average(seft):
    total = 0
    for p in seft.__list_people:
      total += p.get_yob()
    return total/len(seft.__list_people)

ward1 = Ward("Ward1")

ward1.add_person(Student1)
ward1.describe()

ward1.add_person(teacher1)
ward1.describe()

ward1.add_person(doctor1)
ward1.describe()

ward1.add_person(doctor2)
ward1.describe()

ward1 = Ward("Ward1")
ward1.add_person(doctor1)
ward1.add_person(doctor2)
ward1.describe()

ward1.count_doctor()

ward1.sort_yob()
ward1.describe()

isinstance(doctor1, Doctor)

ward1.compute_average()

